cmake_minimum_required(VERSION 2.8.12)
project(frontal_mmw_radar)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(PACKAGE_DEPENDENCIES
  eigen_conversions
  geometry_msgs
  nav_msgs
  rosbag
  roscpp
  roslib
  sensor_msgs
  std_msgs
  tf
  tf2
  tf2_eigen
  tf2_ros
  urdf
  visualization_msgs
  cv_bridge  
  image_transport
  sensor_driver_msgs
  frontal_mmw_radar_msgs
)

##############################
###### find packages #########
##############################
find_package(catkin REQUIRED COMPONENTS ${PACKAGE_DEPENDENCIES} message_generation)
set(BUILD_SHARED_LIBS OFF)




include(FindPkgConfig) #zhanghm: what mean?

find_package(PCL REQUIRED)
#set(OpenCV_DIR /usr/local/share/OpenCV)
# find_package(OpenCV REQUIRED)
# find_package(OpenCV 2 REQUIRED)
find_package(OpenCV 3 REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(Boost REQUIRED COMPONENTS system iostreams filesystem regex program_options)


catkin_package(
  CATKIN_DEPENDS ${PACKAGE_DEPENDENCIES} message_runtime
  DEPENDS EIGEN3 PCL OpenCV
  INCLUDE_DIRS src
)

#include headers
include_directories(SYSTEM  ${catkin_INCLUDE_DIRS}  ${PCL_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS} ${EIGEN3_INCLUDE_DIR} src include)
include_directories(${OpenCV_INCLUDE_DIRS} ${catkin_INCLUDE_DIRS})

set(SRC_LIST1 src/TypeDef.h src/del_object_detection_radar.h src/frontal_delphi_radar.cpp src/delphi_main.cpp src/del_object_detection_radar.cpp)


set(SRC_LIST2 src/TypeDef.h src/UdpServer.h src/UdpServer.cpp src/con_object_detection_radar.h src/frontal_continental_radar.cpp src/continental_main.cpp src/con_object_detection_radar.cpp)
##############################
#### add executable ##########
##############################

add_executable(frontal_delphi_radar ${SRC_LIST1})
target_link_libraries(frontal_delphi_radar PUBLIC ${catkin_LIBRARIES}
										${PCL_LIBRARIES}  
										${Boost_LIBRARIES}  
										${OpenCV_LIBS})


add_executable(frontal_continental_radar ${SRC_LIST2})
target_link_libraries(frontal_continental_radar PUBLIC ${catkin_LIBRARIES}
										${PCL_LIBRARIES}  
										${Boost_LIBRARIES}  
										${OpenCV_LIBS})
add_executable(get_delphi_radar_data src/get_delphi_radar_data.cpp src/frontal_delphi_radar.cpp)
target_link_libraries(get_delphi_radar_data ${catkin_LIBRARIES}  ${Boost_LIBRARIES})

add_executable(get_continental_radar_data src/get_continental_radar_data.cpp src/frontal_continental_radar.cpp)
target_link_libraries(get_continental_radar_data ${catkin_LIBRARIES}  ${Boost_LIBRARIES})

add_executable(get_ECU src/getECU.cpp src/AnalysisECU.cpp)
target_link_libraries(get_ECU ${catkin_LIBRARIES} ${Boost_LIBRARIES})
##############################
###### install packages #########
##############################
install(DIRECTORY launch DESTINATION share/frontal_mmw_radar/)

install(TARGETS frontal_delphi_radar get_delphi_radar_data get_ECU
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

install(TARGETS frontal_continental_radar get_continental_radar_data 
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

install(
  TARGETS frontal_delphi_radar get_delphi_radar_data get_ECU
  EXPORT frontal_delphi_radarExport
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
)
install(
  TARGETS frontal_continental_radar get_continental_radar_data 
  EXPORT frontal_continental_radarExport
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
)
set(CUDA_USE_STATIC_CUDA_RUNTIME OFF)
